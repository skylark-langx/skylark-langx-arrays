{"version":3,"sources":["skylark-langx-arrays.js"],"names":["define","skylark","types","objects","filter","Array","prototype","find","isArrayLike","baseFindIndex","array","predicate","fromIndex","fromRight","length","index","baseIsNaN","value","flatten","result","i","item","j","push","inArray","indexOf","makeArray","obj","offset","startWith","concat","slice","call","attach","baseIndexOf","compact","contains","first","items","n","func","arr","grep","callback","out","each","toArray","last","merge","second","l","undefined","forEach","fn","map","elements","key","values","reduce","initialValue","uniq","idx","arrays","main"],"mappings":"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","file":"../skylark-langx-arrays.js","sourcesContent":["define('skylark-langx-arrays/arrays',[\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\"\r\n],function(skylark,types,objects){\r\n    var filter = Array.prototype.filter,\r\n        find = Array.prototype.find,\r\n        isArrayLike = types.isArrayLike;\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function contains(array,item) {\r\n      return inArray(item,array);\r\n    }\r\n\r\n    function filter2(array,func) {\r\n      return filter.call(array,func);\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        objects.each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function indexOf(array,item) {\r\n      return array.indexOf(item);\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\r\n    function forEach (arr, fn) {\r\n      if (arr.forEach) return arr.forEach(fn)\r\n      for (var i = 0; i < arr.length; i++) fn(arr[i], i);\r\n    }\r\n\r\n\r\n    function first(arr) {\r\n        return arr[0];     \r\n    }\r\n\r\n    // Get the last element of an array. \r\n    function last(arr) {\r\n        return arr[arr.length - 1];     \r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n\r\n    function merge( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n\r\n    function reduce(array,callback,initialValue) {\r\n        return Array.prototype.reduce.call(array,callback,initialValue);\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    function find2(array,func) {\r\n      return find.call(array,func);\r\n    }\r\n\r\n    return skylark.attach(\"langx.arrays\",{\r\n        baseFindIndex: baseFindIndex,\r\n\r\n        baseIndexOf : baseIndexOf,\r\n        \r\n        compact: compact,\r\n\r\n        contains,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n        filter : filter2,\r\n\r\n        find : find2,\r\n\r\n        first,\r\n\r\n        flatten: flatten,\r\n\r\n        grep: grep,\r\n\r\n        inArray: inArray,\r\n\r\n        indexOf : indexOf,\r\n\r\n        makeArray: makeArray, // \r\n\r\n        toArray : makeArray,\r\n\r\n        last : last,\r\n\r\n        merge : merge,\r\n\r\n        forEach : forEach,\r\n\r\n        map : map,\r\n        \r\n        reduce : reduce,\r\n\r\n        uniq : uniq\r\n\r\n    });\r\n});\ndefine('skylark-langx-arrays/main',[\r\n\t\"./arrays\"\r\n],function(arrays){\r\n\treturn arrays;\r\n});\ndefine('skylark-langx-arrays', ['skylark-langx-arrays/main'], function (main) { return main; });\n\n"]}