{"version":3,"sources":["skylark-langx-arrays.js"],"names":["define","skylark","attach","arrays","baseFindIndex","array","predicate","fromIndex","fromRight","length","index","baseIsNaN","value","baseIndexOf","_filter","Array","prototype","filter","func","call","compact","item","inArray","i","indexOf","contains","types","flatten","isArrayLike","result","j","push","funcs","difference","restArguments","rest","_find","find","first","items","n","slice","objects","grep","callback","out","each","last","arr","makeArray","obj","offset","startWith","concat","map","elements","key","values","merge","second","l","undefined","pullAt","indexes","baseAt","sort","a","b","reduce","initialValue","uniq","idx","without","otherArrays","main"],"mappings":";;;;;;;g4BAAAA,EAAA,+BACA,oBACA,SAAAC,GACA,OAAAA,EAAAC,OAAA,kBAEAF,EAAA,wCACA,YACA,SAAAG,GAuBA,OAAAA,EAAAC,cAZA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAJ,EAAAI,OACAC,EAAAH,GAAAC,EAAA,GAAA,GAEA,KAAAA,EAAAE,MAAAA,EAAAD,GACA,GAAAH,EAAAD,EAAAK,GAAAA,EAAAL,GACA,OAAAK,EAGA,OAAA,KAKAV,EAAA,qCACA,WACA,qBACA,SAAAG,EAAAC,GASA,SAAAO,EAAAC,GACA,OAAAA,GAAAA,EA0BA,OAAAT,EAAAU,YAfA,SAAAR,EAAAO,EAAAL,GACA,GAAAK,GAAAA,EACA,OAAAR,EAAAC,EAAAM,EAAAJ,GAEA,IAAAG,EAAAH,EAAA,EACAE,EAAAJ,EAAAI,OAEA,OAAAC,EAAAD,GACA,GAAAJ,EAAAK,KAAAE,EACA,OAAAF,EAGA,OAAA,KAKAV,EAAA,+BACA,YACA,SAAAG,GACA,IAAAW,EAAAC,MAAAC,UAAAC,OA3EA,OAAAd,EAAAc,OA6EA,SAAAZ,EAAAa,GACA,OAAAJ,EAAAK,KAAAd,EAAAa,MA3EAlB,EAAA,gCACA,WACA,YACA,SAAAG,EAAAc,GAQA,OAAAd,EAAAiB,QANA,SAAAf,GACA,OAAAY,EAAAZ,EAAA,SAAAgB,GACA,OAAA,MAAAA,OAMArB,EAAA,iCACA,YACA,SAAAG,GAqBA,OAAAA,EAAAmB,QApBA,SAAAD,EAAAhB,GACA,IAAAA,EACA,OAAA,EAEA,IAAAkB,EAEA,GAAAlB,EAAAmB,QACA,OAAAnB,EAAAmB,QAAAH,GAGAE,EAAAlB,EAAAI,OACA,KAAAc,KACA,GAAAlB,EAAAkB,KAAAF,EACA,OAAAE,EAIA,OAAA,KAMAvB,EAAA,iCACA,WACA,cACA,SAAAG,EAAAmB,GAMA,OAAAnB,EAAAsB,SAJA,SAAApB,EAAAgB,GACA,OAAAC,EAAAD,EAAAhB,MAKAL,EAAA,gCACA,sBACA,YACA,SAAA0B,EAAAvB,GAsBA,OAAAA,EAAAwB,QApBA,SAAAtB,GACA,GAAAqB,EAAAE,YAAAvB,GAAA,CAEA,IADA,IAAAwB,KACAN,EAAA,EAAAA,EAAAlB,EAAAI,OAAAc,IAAA,CACA,IAAAF,EAAAhB,EAAAkB,GACA,GAAAG,EAAAE,YAAAP,GACA,IAAA,IAAAS,EAAA,EAAAA,EAAAT,EAAAZ,OAAAqB,IACAD,EAAAE,KAAAV,EAAAS,SAGAD,EAAAE,KAAAV,GAGA,OAAAQ,EAEA,OAAAxB,KAOAL,EAAA,mCACA,sBACA,WACA,YACA,WACA,cACA,SAAAgC,EAAA7B,EAAAwB,EAAAV,EAAAQ,GAGA,IAAAQ,EAAAD,EAAAE,cAAA,SAAA7B,EAAA8B,GAEA,OADAA,EAAAR,EAAAQ,GAAA,GAAA,GACAlB,EAAAZ,EAAA,SAAAO,GACA,OAAAa,EAAAU,EAAAvB,OAIA,OAAAT,EAAA8B,WAAAA,IAGAjC,EAAA,6BACA,YACA,SAAAG,GACA,IAAAiC,EAAArB,MAAAC,UAAAqB,KAMA,OAAAlC,EAAAkC,KAJA,SAAAhC,EAAAa,GACA,OAAAkB,EAAAjB,KAAAd,EAAAa,MAKAlB,EAAA,8BACA,YACA,SAAAG,GASA,OAAAA,EAAAmC,MARA,SAAAC,EAAAC,GACA,OAAAA,EACAD,EAAAE,MAAA,EAAAD,GAEAD,EAAA,MAMAvC,EAAA,6BACA,wBACA,YACA,SAAA0C,EAAAvC,GAaA,OAAAA,EAAAwC,KAZA,SAAAtC,EAAAuC,GACA,IAAAC,KAQA,OANAH,EAAAI,KAAAzC,EAAA,SAAAkB,EAAAF,GACAuB,EAAAvB,EAAAE,IACAsB,EAAAd,KAAAV,KAIAwB,KAKA7C,EAAA,gCACA,YACA,SAAAG,GAMA,OAAAA,EAAAqB,QAJA,SAAAnB,EAAAgB,GACA,OAAAhB,EAAAmB,QAAAH,MAKArB,EAAA,6BACA,YACA,SAAAG,GAMA,OAAAA,EAAA4C,KAJA,SAAAC,GACA,OAAAA,EAAAA,EAAAvC,OAAA,MAKAT,EAAA,mCACA,sBACA,YACA,SAAA0B,EAAAvB,GAUA,OAAAA,EAAA8C,UATA,SAAAC,EAAAC,EAAAC,GACA,GAAA1B,EAAAE,YAAAsB,GACA,OAAAE,OAAAC,OAAAtC,MAAAC,UAAAyB,MAAAtB,KAAA+B,EAAAC,GAAA,IAIA,OAAAD,MAKAlD,EAAA,4BACA,sBACA,WACA,aACA,SAAA0B,EAAAvB,EAAAwB,GAiBA,OAAAxB,EAAAmD,IAhBA,SAAAC,EAAAX,GACA,IAAAhC,EACAW,EAAAiC,EADAC,KAEA,GAAA/B,EAAAE,YAAA2B,GACA,IAAAhC,EAAA,EAAAA,EAAAgC,EAAA9C,OAAAc,IAEA,OADAX,EAAAgC,EAAAzB,KAAAoC,EAAAhC,GAAAgC,EAAAhC,GAAAA,KACAkC,EAAA1B,KAAAnB,QAGA,IAAA4C,KAAAD,EAEA,OADA3C,EAAAgC,EAAAzB,KAAAoC,EAAAC,GAAAD,EAAAC,GAAAA,KACAC,EAAA1B,KAAAnB,GAEA,OAAAe,EAAA8B,MAKAzD,EAAA,8BACA,YACA,SAAAG,GAsBA,OAAAA,EAAAuD,MApBA,SAAApB,EAAAqB,GACA,IAAAC,EAAAD,EAAAlD,OACAc,EAAAe,EAAA7B,OACAqB,EAAA,EAEA,GAAA,iBAAA8B,EACA,KAAA9B,EAAA8B,EAAA9B,IACAQ,EAAAf,KAAAoC,EAAA7B,QAGA,UAAA+B,IAAAF,EAAA7B,IACAQ,EAAAf,KAAAoC,EAAA7B,KAMA,OAFAQ,EAAA7B,OAAAc,EAEAe,KAMAtC,EAAA,gCACA,sBACA,wBACA,YACA,SAAA0B,EAAAgB,EAAAvC,GAuCA,OAAAA,EAAA2D,OAfA,SAAAzD,KAAA0D,GACA,MAAA1D,GAAAA,EAAAI,OAAA,MACAoB,EAAAa,EAAAsB,OAAA3D,EAAA0D,GAEAA,EAAAE,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAC,IAGA,IAAA,IAAA5C,EAAAwC,EAAAtD,OAAA,EAAAc,GAAA,EAAAA,IACAlB,EAAAoC,MAAAsB,EAAAxC,GAAA,GAGA,OAAAM,KAMA7B,EAAA,+BACA,YACA,SAAAG,GAMA,OAAAA,EAAAiE,OAJA,SAAA/D,EAAAuC,EAAAyB,GACA,OAAAtD,MAAAC,UAAAoD,OAAAjD,KAAAd,EAAAuC,EAAAyB,MAKArE,EAAA,6BACA,WACA,YACA,SAAAG,EAAAc,GAQA,OAAAd,EAAAmE,KANA,SAAAjE,GACA,OAAAY,EAAAE,KAAAd,EAAA,SAAAgB,EAAAkD,GACA,OAAAlE,EAAAmB,QAAAH,IAAAkD,OAMAvE,EAAA,gCACA,sBACA,WACA,gBACA,SAAAgC,EAAA7B,EAAA8B,GAGA,IAAAuC,EAAAxC,EAAAE,cAAA,SAAA7B,EAAAoE,GACA,OAAAxC,EAAA5B,EAAAoE,KAGA,OAAAtE,EAAAqE,QAAAA,IAEAxE,EAAA,6BACA,WACA,oBACA,iBACA,YACA,aACA,eACA,WACA,SACA,UACA,YACA,SACA,aACA,YACA,SACA,eACA,QACA,UACA,YACA,WACA,SACA,aACA,SAAAG,GACA,OAAAA,IAEAH,EAAA,wBAAA,6BAAA,SAAA0E,GAAA,OAAAA","file":"../skylark-langx-arrays.js","sourcesContent":["define('skylark-langx-arrays/arrays',[\r\n  \"skylark-langx-ns\"\r\n],function(skylark){\r\n    return skylark.attach(\"langx.arrays\");\r\n});\ndefine('skylark-langx-arrays/base-find-index',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    return arrays.baseFindIndex = baseFindIndex;\r\n});\ndefine('skylark-langx-arrays/base-indexof',[\r\n  \"./arrays\",\r\n  \"./base-find-index\"\r\n],function(arrays,baseFindIndex){\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\t\r\n\treturn arrays.baseIndexOf = baseIndexOf;\r\n});\ndefine('skylark-langx-arrays/filter',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n   var _filter = Array.prototype.filter;\r\n \r\n    function filter(array,func) {\r\n      return _filter.call(array,func);\r\n    }\r\n\r\n    return arrays.filter = filter;\r\n\t\r\n});\ndefine('skylark-langx-arrays/compact',[\r\n  \"./arrays\",\r\n  \"./filter\"\r\n],function(arrays,filter){\r\n\r\n    function compact(array) {\r\n        return filter(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    return arrays.compact = compact;\r\n});\ndefine('skylark-langx-arrays/in-array',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    return arrays.inArray = inArray;\r\n\t\r\n});\ndefine('skylark-langx-arrays/contains',[\r\n  \"./arrays\",\r\n  \"./in-array\"\r\n],function(arrays,inArray){\r\n\r\n    function contains(array,item) {\r\n      return inArray(item,array);\r\n    }\r\n\t\r\n\treturn arrays.contains = contains;\r\n});\ndefine('skylark-langx-arrays/flatten',[\r\n  \"skylark-langx-types\",\r\n  \"./arrays\"\r\n],function(types,arrays){\r\n\r\n    function flatten(array) {\r\n        if (types.isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (types.isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    return arrays.flatten = flatten;\r\n});\ndefine('skylark-langx-arrays/difference',[\r\n  \"skylark-langx-funcs\",\r\n  \"./arrays\",\r\n  \"./flatten\",\r\n  \"./filter\",\r\n  \"./contains\"\r\n],function(funcs,arrays,flatten,filter,contains){\r\n   // Take the difference between one array and a number of other arrays.\r\n    // Only the elements present in just the first array will remain.\r\n    var difference  = funcs.restArguments(function(array, rest) {\r\n      rest = flatten(rest, true, true);\r\n      return filter(array, function(value){\r\n        return !contains(rest, value);\r\n      });\r\n    });\r\n\r\n    return arrays.difference = difference;\r\n\t\r\n});\ndefine('skylark-langx-arrays/find',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n    var _find = Array.prototype.find;\r\n\r\n    function find(array,func) {\r\n      return _find.call(array,func);\r\n    }\r\n\r\n    return arrays.find = find;\r\n});\ndefine('skylark-langx-arrays/first',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n    function first(items,n) {\r\n      if (n) {\r\n          return items.slice(0,n);\r\n      } else {\r\n          return items[0];\r\n      }\r\n    }\r\n\r\n    return arrays.first = first;\r\n});\ndefine('skylark-langx-arrays/grep',[\r\n  \"skylark-langx-objects\",\r\n  \"./arrays\"\r\n],function(objects,arrays){\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        objects.each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    return arrays.grep = grep;\r\n});\ndefine('skylark-langx-arrays/indexof',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n\r\n    function indexOf(array,item) {\r\n      return array.indexOf(item);\r\n    }\r\n\r\n    return arrays.indexOf = indexOf;\r\n});\ndefine('skylark-langx-arrays/last',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n    // Get the last element of an array. \r\n    function last(arr) {\r\n        return arr[arr.length - 1];     \r\n    }\r\n\r\n    return arrays.last = last;\r\n});\ndefine('skylark-langx-arrays/make-array',[\r\n\t\"skylark-langx-types\",\r\n \t\"./arrays\"\r\n],function(types,arrays){\r\n    function makeArray(obj, offset, startWith) {\r\n       if (types.isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\treturn arrays.makeArray = makeArray;\t\r\n});\ndefine('skylark-langx-arrays/map',[\r\n\t\"skylark-langx-types\",\r\n  \t\"./arrays\",\r\n  \t\"./flatten\"\r\n],function(types,arrays,flatten){\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (types.isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n    return arrays.map = map;\r\n});\ndefine('skylark-langx-arrays/merge',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n\r\n    function merge( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n\r\n    return arrays.merge = merge;\r\n\t\r\n});\ndefine('skylark-langx-arrays/pull-at',[\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"./arrays\"\r\n],function(types,objects,arrays){\r\n\r\n\t/**\r\n\t * Removes elements from `array` corresponding to `indexes` and returns an\r\n\t * array of removed elements.\r\n\t *\r\n\t * **Note:** Unlike `at`, this method mutates `array`.\r\n\t *\r\n\t * @category Array\r\n\t * @param {Array} array The array to modify.\r\n\t * @param {...(number|number[])} [indexes] The indexes of elements to remove.\r\n\t * @returns {Array} Returns the new array of removed elements.\r\n\t * @see pull, pullAll, pullAllBy, pullAllWith, remove, reject\r\n\t * @example\r\n\t *\r\n\t * const array = ['a', 'b', 'c', 'd']\r\n\t * const pulled = pullAt(array, [1, 3])\r\n\t *\r\n\t * console.log(array)\r\n\t * // => ['a', 'c']\r\n\t *\r\n\t * console.log(pulled)\r\n\t * // => ['b', 'd']\r\n\t */\r\n\tfunction pullAt(array, ...indexes) {\r\n\t  const length = array == null ? 0 : array.length\r\n\t  const result = objects.baseAt(array, indexes)\r\n\r\n\t  indexes.sort(function(a, b) {\r\n  \t\treturn a - b;\r\n\t  });\r\n\r\n\t  for (let i= indexes.length-1;i>=0;i--) {\r\n\t  \tarray.slice(indexes[i],1);\r\n\t  }\r\n\r\n\t  return result\r\n\t}\r\n\r\n\treturn arrays.pullAt = pullAt;\r\n});\r\n\ndefine('skylark-langx-arrays/reduce',[\r\n  \"./arrays\"\r\n],function(arrays){\r\n\r\n    function reduce(array,callback,initialValue) {\r\n        return Array.prototype.reduce.call(array,callback,initialValue);\r\n    }\r\n\r\n    return arrays.reduce = reduce;\t\r\n});\ndefine('skylark-langx-arrays/uniq',[\r\n  \"./arrays\",\r\n  \"./filter\"\r\n],function(arrays,filter){\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\t\r\n\treturn arrays.uniq = uniq;\r\n});\ndefine('skylark-langx-arrays/without',[\r\n\t\"skylark-langx-funcs\",\r\n  \"./arrays\",\r\n  \"./difference\"\r\n],function(funcs,arrays,difference){\r\n\r\n    // Return a version of the array that does not contain the specified value(s).\r\n    var without = funcs.restArguments(function(array, otherArrays) {\r\n      return difference(array, otherArrays);\r\n    });\r\n\r\n    return arrays.without = without;\r\n});\ndefine('skylark-langx-arrays/main',[\r\n\t\"./arrays\",\r\n\t\"./base-find-index\",\r\n\t\"./base-indexof\",\r\n\t\"./compact\",\r\n\t\"./contains\",\r\n\t\"./difference\",\r\n\t\"./filter\",\r\n\t\"./find\",\r\n\t\"./first\",\r\n\t\"./flatten\",\r\n\t\"./grep\",\r\n\t\"./in-array\",\r\n\t\"./indexof\",\r\n\t\"./last\",\r\n\t\"./make-array\",\r\n\t\"./map\",\r\n\t\"./merge\",\r\n\t\"./pull-at\",\r\n\t\"./reduce\",\r\n\t\"./uniq\",\r\n\t\"./without\"\r\n],function(arrays){\r\n\treturn arrays;\r\n});\ndefine('skylark-langx-arrays', ['skylark-langx-arrays/main'], function (main) { return main; });\n\n"]}