{"version":3,"sources":["arrays.js"],"names":["define","skylark","types","objects","funcs","filter","Array","prototype","find","isArrayLike","baseFindIndex","array","predicate","fromIndex","fromRight","length","index","baseIsNaN","value","contains","item","inArray","difference","restArguments","rest","flatten","filter2","func","call","result","i","j","push","indexOf","makeArray","obj","offset","startWith","concat","slice","otherArrays","attach","baseIndexOf","compact","first","items","n","grep","callback","out","each","toArray","last","arr","merge","second","l","undefined","forEach","fn","map","elements","key","values","reduce","initialValue","uniq","idx"],"mappings":"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","file":"../arrays.js","sourcesContent":["define([\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-funcs\"\r\n],function(skylark,types,objects,funcs){\r\n    var filter = Array.prototype.filter,\r\n        find = Array.prototype.find,\r\n        isArrayLike = types.isArrayLike;\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function contains(array,item) {\r\n      return inArray(item,array);\r\n    }\r\n\r\n\r\n    // Take the difference between one array and a number of other arrays.\r\n    // Only the elements present in just the first array will remain.\r\n    var difference  = funcs.restArguments(function(array, rest) {\r\n      rest = flatten(rest, true, true);\r\n      return filter2(array, function(value){\r\n        return !contains(rest, value);\r\n      });\r\n    });\r\n\r\n    function filter2(array,func) {\r\n      return filter.call(array,func);\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        objects.each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function indexOf(array,item) {\r\n      return array.indexOf(item);\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\r\n    function forEach (arr, fn) {\r\n      if (arr.forEach) return arr.forEach(fn)\r\n      for (var i = 0; i < arr.length; i++) fn(arr[i], i);\r\n    }\r\n\r\n\r\n    function first(items,n) {\r\n      if (n) {\r\n          return items.slice(0,n);\r\n      } else {\r\n          return items[0];\r\n      }\r\n    }\r\n\r\n    // Get the last element of an array. \r\n    function last(arr) {\r\n        return arr[arr.length - 1];     \r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n\r\n    function merge( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n\r\n    function reduce(array,callback,initialValue) {\r\n        return Array.prototype.reduce.call(array,callback,initialValue);\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    function find2(array,func) {\r\n      return find.call(array,func);\r\n    }\r\n\r\n\r\n    // Return a version of the array that does not contain the specified value(s).\r\n    var without = funcs.restArguments(function(array, otherArrays) {\r\n      return difference(array, otherArrays);\r\n    });\r\n\r\n    return skylark.attach(\"langx.arrays\",{\r\n        baseFindIndex: baseFindIndex,\r\n\r\n        baseIndexOf : baseIndexOf,\r\n        \r\n        compact: compact,\r\n\r\n        contains,\r\n\r\n        difference,\r\n\r\n        filter : filter2,\r\n\r\n        find : find2,\r\n\r\n        first,\r\n\r\n        flatten: flatten,\r\n\r\n        grep: grep,\r\n\r\n        inArray: inArray,\r\n\r\n        indexOf : indexOf,\r\n\r\n        makeArray: makeArray, // \r\n\r\n        toArray : makeArray,\r\n\r\n        last : last,\r\n\r\n        merge : merge,\r\n\r\n        forEach : forEach,\r\n\r\n        map : map,\r\n        \r\n        reduce : reduce,\r\n\r\n        uniq : uniq\r\n\r\n    });\r\n});"]}